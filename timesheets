#!/usr/bin/env python3

import sys
import json
from pathlib import Path
from datetime import datetime, timedelta
from string import Template
from rich.console import Console
from rich.table import Table
import subprocess


def main():
    if len(sys.argv) < 2:
        raise ValueError('Please enter a command.')

    command = sys.argv[1]
    args = sys.argv[2:]
    match command:
        case 'start':
            if len(sys.argv) > 2:
                name = ' '.join(sys.argv[2:])
                start(name)
            else:
                start()
        case 'stop':
            stop(*args)
        case 'resume':
            resume(*args)
        case 'show':
            day = args[0] if args else None
            data = _load_data(day)
            date_str = day or 'today'
            show(data, date_str)
        case 'remove':
            remove(*args)
        case 'file':
            printfile(*args)
        case 'open':
            xdgopen(*args)
        case 'close':
            close(*args)
        case _:
            raise ValueError(f'Command not recognized: {command}')


def start(name: str = None) -> None:
    """Starts a new timesheet, closing the last one if it is still open."""
    data = _load_data()
    data = _stop_running_timesheet_if_open(data)
    next_id = data['next_id']
    name = name or '...'
    data['timesheets'][str(next_id)] = {
        'name': name,
        'time_blocks': [],
        'open_since': _get_now_time_str(),
    }
    data['open_id'] = str(next_id)
    data['last_active_id'] = str(next_id)
    data['next_id'] = next_id + 1
    _save_data(data)


def _stop_running_timesheet_if_open(data: dict) -> dict:
    """Does nothing when there is no running timesheet."""
    if data['open_id'] is None:
        return data

    timesheet = data['timesheets'][data['open_id']]
    last_start_time = timesheet['open_since']
    stop_time = _get_now_time_str()
    new_time_block = (last_start_time, stop_time)
    timesheet['open_since'] = None
    timesheet['time_blocks'].append(new_time_block)
    data['open_id'] = None
    return data


def stop(day: str = None) -> None:
    """Stops the currently running timesheet."""
    data = _load_data(day)
    if data['open_id'] is None:
        raise ValueError('There is nothing to stop.')

    data = _stop_running_timesheet_if_open(data)
    _save_data(data, day)


def resume(timesheet_id: str = None) -> None:
    """Resumes an existing timesheet, the last active one by default.
    Will close the running timesheet, if applicable.
    """
    data = _load_data()
    if timesheet_id:
        timesheet = data['timesheets'].get(timesheet_id)
        if not timesheet:
            raise ValueError(
                f"The specified timesheet was not found (timesheet #{timesheet_id})."
            )
    else:
        if not data['last_active_id']:
            raise ValueError('There is nothing to resume!')
        timesheet_id = data['last_active_id']
        timesheet = data['timesheets'].get(timesheet_id)

    if timesheet['open_since']:
        raise ValueError(
            f"This timer is already running! (timesheet #{timesheet_id})."
        )

    data = _stop_running_timesheet_if_open(data)
    timesheet['open_since'] = _get_now_time_str()
    data['open_id'] = str(timesheet_id)
    data['last_active_id'] = str(timesheet_id)
    _save_data(data)


def show(data: dict, date_str: str = None) -> None:
    title = f'Timesheets for {date_str}' if date_str else None
    table = Table(title=title)
    columns = ["ID", "Name", "Total", 'Status', 'Blocks']
    for column in columns:
        table.add_column(column)

    grand_total = timedelta()

    for tsid, ts in data['timesheets'].items():
        total_time, time_blocks = _get_total_and_timeblocks_from_ts(ts)

        status = ''
        if data['open_id'] == tsid:
            status = 'Running...'
            time_blocks.append('...')
            start = datetime.strptime(ts['open_since'], '%H:%M:%S')
            stop = datetime.now()
            delta = _round_up_timedelta(stop - start)
            total_time += delta
        elif data['last_active_id'] == tsid:
            status = 'Last Active'

        time_blocks_str = '    '.join(time_blocks)
        total = strfdelta(total_time, '%H:%M') if total_time else ''

        table.add_row(
            tsid,
            ts['name'],
            total,
            status,
            time_blocks_str,
            style='bright_green',
        )

        grand_total += total_time

    console = Console()
    console.print(table)
    grand_total_str = strfdelta(grand_total, '%H:%M')
    console.print(f'-> Grand total: {grand_total_str}', style='bright_green')


def _get_total_and_timeblocks_from_ts(
    ts: dict, round: bool = True,
) -> (timedelta, list):
    time_blocks = []
    total_time = timedelta()
    for block in ts['time_blocks']:
        start = datetime.strptime(block[0], '%H:%M:%S')
        stop = datetime.strptime(block[1], '%H:%M:%S')
        delta = stop - start
        if round:
            delta = _round_up_timedelta(delta)
        total_time += delta
        time_blocks.append(strfdelta(delta, '%H:%M'))
    return total_time, time_blocks


def remove(timesheet_id: str, day: str = None) -> None:
    data = _load_data(day)

    timesheets = data.get('timesheets')
    if not data or not timesheets.get(timesheet_id):
        raise ValueError(f'Did not find timesheet #{timesheet_id}.')

    del timesheets[timesheet_id]
    _save_data(data, day)


def printfile(day: str = None) -> None:
    print(_get_file_path(day))


def xdgopen(timesheet_id: str, day: str = None) -> None:
    data = _load_data(day)

    timesheets = data.get('timesheets')
    if not data or not (timesheet := timesheets.get(timesheet_id)):
        raise ValueError(f'Did not find timesheet #{timesheet_id}.')

    subprocess.run(['xdg-open', timesheet.get('name')])


def close(day: str = None) -> None:
    day_str = day or 'today'
    confirm = input(f'Are you sure you want to close {day_str}? (Y/n)')
    if confirm.lower().strip() == 'n':
        return


    data = _load_data(day)
    if data.get('open_id'):
        data = _stop_running_timesheet_if_open(data)
        print('Closed currently running timesheet...')
        _save_data(data, day)
    
    show(data, day)

    timesheets = data.get('timesheets')
    if not timesheets:
        print(f'No timesheets found for {day_str}')
        return
    
    manual_intervention = input(
        'Would you like to manually change the file before proceeding? (y/N)'
    )
    if manual_intervention.lower().strip() == 'y':
        subprocess.run(['$EDITOR', _get_file_path(day)], shell=True)
    
    wildcard_ids = []
    total_wildcard_time = timedelta()
    for tsid, ts in timesheets.items():
        if ts.get('name') == '...':
            time, _ = _get_total_and_timeblocks_from_ts(ts, round=False)
            total_wildcard_time += time
            wildcard_ids.append(tsid)
    for id in wildcard_ids:
        del timesheets[id]

    if wildcard_ids:
        total_str = strfdelta(total_wildcard_time, '%H:%M')
        print(
            f'Found {len(wildcard_ids)} wildcard timesheets with a total time of '
            f'{total_str}. Would you like to sprinkle this time over the other '
            'timesheets? (y/n)'
        )
        while (answer := input().strip().lower()) not in {'y', 'n'}:
            print("Please type 'y' or 'n', dummy")
        if answer == 'y':
            _sprinkle(timesheets, total_wildcard_time)
            print('\nSprinkle succesful! New overview:')
            show(data)

    for ts in timesheets.values():
        subprocess.run(
            ['xdg-open', ts['name']],
            stdout=subprocess.DEVNULL,
            stderr=subprocess.STDOUT,
        )
        print('\n' + ts['name'])
        total_time, _ = _get_total_and_timeblocks_from_ts(ts)
        total_time_formatted = strfdelta(total_time, '%H:%M')
        print(f'Total time: {total_time_formatted}')
        input('Press enter to go to the next timesheet') 
        

def _sprinkle(timesheets: dict, amount: timedelta) -> dict:
    """Sprinkles the given timedelta evenly over given timesheets."""
    total_time = timedelta()
    for ts in timesheets.values():
        time, _ = _get_total_and_timeblocks_from_ts(ts, round=False)
        total_time += time
    total_time: float = total_time.total_seconds()
    total_sprinkle_time: float = amount.total_seconds()
    ratio: float = total_sprinkle_time / total_time

    for ts in timesheets.values():
        time, _ = _get_total_and_timeblocks_from_ts(ts, round=False)
        extra_time = time * ratio
        last_end_time = datetime.strptime(ts['time_blocks'][-1][-1], '%H:%M:%S')
        new_end_time = last_end_time + extra_time
        ts['time_blocks'][-1][-1] = new_end_time.strftime('%H:%M:%S')
    return timesheets


def _get_now_time_str() -> str:
    return datetime.now().strftime('%H:%M:%S')


def _get_next_id(data) -> int:
    if data:
        last_id = data[-1]['id']
    else:
        last_id = 0
    
    return last_id + 1


def _load_data(day: str = None) -> dict:
    """Load data of today in dict."""
    today_file = _get_file_path(day)
    with open(today_file, 'r') as f:
        data = json.load(f)
    
    return data


def _save_data(data: dict, day: str = None) -> None:
    data = _ensure_consistency(data)
    file = _get_file_path(day)
    with open(file, 'w') as f:
        json.dump(data, f, indent=4)


def _ensure_consistency(data: dict) -> None:
    open_id = data['open_id']
    if open_id and open_id not in data['timesheets']:
        data['open_id'] = None
    last_active_id = data['last_active_id']
    if last_active_id and last_active_id not in data['timesheets']:
        data['last_active_id'] = None
    return data


def _get_file_path(day: str = None) -> Path:
    data_dir = Path.home() / '.timesheets'
    data_dir.mkdir(exist_ok=True)

    if day == 'yesterday':
        day = (datetime.today() - timedelta(1)).strftime('%d-%m-%Y')

    if day:
        today_str = day
    else:
        today_str = datetime.today().strftime('%d-%m-%Y')
    today_file = data_dir / (today_str + '.json')

    if not today_file.exists():
        with open(today_file, 'w') as f:
            json.dump({
                'open_id': None,
                'last_active_id': None,
                'next_id': 0,
                'timesheets': {},
            }, f)

    return today_file


def _round_up_timedelta(dt) -> timedelta:
    five = timedelta(minutes=5)
    count = -(-dt // five)
    return five * count


class DeltaTemplate(Template):
    delimiter = "%"


def strfdelta(tdelta, fmt):
    d = {"D": tdelta.days}
    hours, rem = divmod(tdelta.seconds, 3600)
    minutes, seconds = divmod(rem, 60)
    d["H"] = '{:02d}'.format(hours)
    d["M"] = '{:02d}'.format(minutes)
    d["S"] = '{:02d}'.format(seconds)
    t = DeltaTemplate(fmt)
    return t.substitute(**d)


if __name__ == '__main__':
    main()